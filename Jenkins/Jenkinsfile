#!groovy

def commonLib = evaluate readTrusted("Jenkins/Pipeline/common.groovy")
def terraformLib = evaluate readTrusted("Jenkins/Pipeline/terraform.groovy")
def lambdasLib = evaluate readTrusted("Jenkins/Pipeline/lambdas.groovy")
def buildAPILib = evaluate readTrusted("Jenkins/Pipeline/buildAPI.groovy")
def storageLib = evaluate readTrusted("Jenkins/Pipeline/storage.groovy")
def loggerLib = evaluate readTrusted("Jenkins/Pipeline/logger.groovy")
String accessKey
String secretKey
String appFolder
String backendBucket
String awsRegion
def pipelineAction
String stateTable
String cloudEnv

pipeline {
    agent {
        dockerfile {
            filename "Jenkins/Agents/Dockerfile"
        }
    }

    environment {
        String API_UPLOAD_BUCKET = "api-bucket"
        String API_BUCKET_KEY = "api"
        String TERRAFORM_VERSION = "1.4.6"
        String GRADLE_VERSION = "8.1.1"
    }

    parameters {
        choice(name: "APP_FOLDER", choices: ["core-resources", "lambdas", "database", "api"], description: "Folder where pipeline actions should run")
        choice(name: "PIPELINE_ACTION", choices: ["test", "lambdas", "deploy-api", "init-and-plan", "apply", "destroy"], description: "Pipeline deploy action")
        choice(name: "CLOUD_ENVIRONMENT", choices: ["dev", "test", "prod"], description: "Deployment cloud environment")
        choice(name: "AWS_REGION", choices: ["us-east-1", "us-east-2", "us-west-1", "ap-southeast-3"], description: "AWS Region to deploy resources and app")
        password(name: "AWS_ACCESS_KEY", description: "AWS ACCESS KEY")
        password(name: "AWS_SECRET_KEY", description: "AWS SECRET KEY")
    }

    stages {
        stage("Update Node") {
            steps {
                script {
                    try {
                        sh """
                            terraform --version
                        """
                    } catch (err) {
                        echo "$err installing Terraform in Docker"
                        loggerLib.errorBanner("Terraform is not installed. Please check the Dockerfile")
                    }
                }
            }
        }

        stage("Set Variables") {
            steps {
                script {
                    pipelineAction = params.PIPELINE_ACTION
                    awsRegion = params.AWS_REGION
                    appFolder = params.APP_FOLDER
                    cloudEnv = params.CLOUD_ENVIRONMENT
                    accessKey = params.AWS_ACCESS_KEY
                    secretKey = params.AWS_SECRET_KEY

                    backendBucket = commonLib.getBucketName(awsRegion)
                    stateTable = commonLib.getDynamoDBStateTableName(awsRegion)

                    echo "App Folder: $appFolder"
                    echo "Backend State and storage bucket: $backendBucket"
                    echo "DynamoDB state table Name: $stateTable"
                    echo "Current AWS Region: $awsRegion"
                    echo "Cloud Environment $cloudEnv"

                    loggerLib.echoBanner(" \tPipeline Variables set\n \tappFolder: $appFolder\n \tregion: $awsRegion\n \tbackend bucket $backendBucket\n")
                }
            }
        }

        stage("Run API Tests") {
            steps {
                script {
                    buildAPILib.runAPITests()
                }
            }
        }

        stage("Configure AWS Environment") {
            when {
                expression {
                    return pipelineAction != "test"
                }
            }

            steps {
                script {
                    commonLib.configureAWSProfile(awsRegion, accessKey, secretKey)
                    storageLib.getAPIEnvFile(backendBucket)
                }
            }
        }

        stage("Init and Plan") {
            when {
                expression {
                    return pipelineAction != "test" || pipelineAction != "deploy-api"
                }
            }

            steps {
                script {
                    terraformLib.terraformInit(backendBucket, appFolder, cloudEnv, awsRegion, stateTable, accessKey, secretKey)
                    terraformLib.terraformPlan(appFolder, awsRegion, cloudEnv)
                }
            }
        }

         stage("Apply") {
            when {
                expression {
                    return pipelineAction == "apply"
                }
            }

            steps {
                script {
                    terraformLib.terraformApply(appFolder, awsRegion, cloudEnv)
                }
            }
        }

        stage("Build API Environment") {
            when {
                expression {
                    return pipelineAction == "deploy-api" || pipelineAction == "build-and-deploy-api"
                }
            }

            steps {
                script {
                    commonLib.buildKotlinEnvironment()
                }
            }
        }
    }

    post {
        // Clean after build
        always {
            echo "Cleaning workspace"
            cleanWs()
        }
    }
}